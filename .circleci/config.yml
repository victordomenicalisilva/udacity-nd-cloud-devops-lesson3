version: 2.1
orbs:
  slack: circleci/slack@4.3.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
      event:
        type: string
        default: "on_fail"
    steps:
      - run:
          name: Destroy backend environment
          when: << parameters.event >>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>

      - run:
          name: Destroy frontend environment
          when: << parameters.event >>
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      event:
        type: string
        default: "on_fail"
    steps:
      - run:
          name: Revert migrations
          when: << parameters.event >>
          command: |
            SUCCESS=$(curl -H "token: $MEMSTASH_TOKEN" --request GET $MEMSTASH_BASE_URL/udapeople-migration-status-<< parameters.workflow_id >>)
            if(( $SUCCESS==1 ));
            then
              cd ./backend
              npm i
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: circleci
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: circleci
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          channel: circleci
          event: fail
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          channel: circleci
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend scan tests
          command: |
            cd frontend
            npm audit --audit-level=critical
      - slack/notify:
          channel: circleci
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend scan tests
          command: |
            cd backend
            npm audit --audit-level=critical
      - slack/notify:
          channel: circleci
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_SHA1:0:7}" \
              --parameter-overrides ID="${CIRCLE_SHA1:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_SHA1:0:7}" \
              --parameter-overrides ID="${CIRCLE_SHA1:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export BACKEND_IP=$( \
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_SHA1:0:7}" \
            --output text)
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
      - run:
          name: Add back-end IP to MemStash
          command: |
            export BACKEND_IP=$( \
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_SHA1:0:7}" \
            --output text)
            curl -H "Content-Type: text/plain" -H "token: $MEMSTASH_TOKEN" \
            --request PUT --data "$BACKEND_IP" ${MEMSTASH_BASE_URL}/udapeople-backend-ip-${CIRCLE_SHA1:0:7}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_SHA1:0:7}"
          event: on_fail
      - slack/notify:
          channel: circleci
          event: fail
          template: basic_fail_1

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["97:dd:06:8d:39:8c:f1:7b:b6:36:e0:51:0c:4d:78:f0"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_SHA1:0:7}"
          event: on_fail
      - slack/notify:
          channel: circleci
          event: fail
          template: basic_fail_1

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd ./backend
            npm i
            touch .env
            echo ENVIRONMENT=production
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ./.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ./.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ./.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ./.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ./.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ./.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ./.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ./.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ./.env
            touch migrationStatus.txt
            npm run migrations >> migrationStatus.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ./backend/migrationStatus.txt
              then
              curl -H "Content-Type: text/plain" -H "token: $MEMSTASH_TOKEN" \
              --request PUT --data "1" $MEMSTASH_BASE_URL/udapeople-migration-status-${CIRCLE_SHA1:0:7}
              else
              curl -H "Content-Type: text/plain" -H "token: $MEMSTASH_TOKEN" \
              --request PUT --data "0" $MEMSTASH_BASE_URL/udapeople-migration-status-${CIRCLE_SHA1:0:7}
            fi
      - revert-migrations:
          workflow_id: "${CIRCLE_SHA1:0:7}"
          event: on_fail
      - destroy-environment:
          workflow_id: "${CIRCLE_SHA1:0:7}"
          event: on_fail
      - slack/notify:
          channel: circleci
          event: fail
          template: basic_fail_1

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: $MEMSTASH_TOKEN" --request GET $MEMSTASH_BASE_URL/udapeople-backend-ip-${CIRCLE_SHA1:0:7})
            cd ./frontend
            touch ./.env
            echo API_URL="http://${BACKEND_IP}:3030" >> ./.env
      - run:
          name: Deploy frontend objects
          command: |
            cd ./frontend
            npm i
            npm run build
            aws s3 cp ./dist s3://udapeople-"${CIRCLE_SHA1:0:7}" --recursive
      - revert-migrations:
          workflow_id: "${CIRCLE_SHA1:0:7}"
          event: on_fail
      - destroy-environment:
          workflow_id: "${CIRCLE_SHA1:0:7}"
          event: on_fail
      - slack/notify:
          channel: circleci
          event: fail
          template: basic_fail_1

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["97:dd:06:8d:39:8c:f1:7b:b6:36:e0:51:0c:4d:78:f0"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm
      - run:
          name: Prepare backend
          command: |
            cd ./backend
            npm i
            touch .env
            echo ENVIRONMENT=production
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ./.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ./.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ./.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ./.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ./.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ./.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ./.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ./.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ./.env
            npm run build
            cd ../
            tar -czvf /root/project/backend.tar.gz backend/dist
      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible/
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations:
          workflow_id: "${CIRCLE_SHA1:0:7}"
          event: on_fail
      - destroy-environment:
          workflow_id: "${CIRCLE_SHA1:0:7}"
          event: on_fail
      - slack/notify:
          channel: circleci
          event: fail
          template: basic_fail_1

  smoke-test:
    docker:
      - image: "python:3.7-alpine3.11"
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Get backend url and smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: $MEMSTASH_TOKEN" --request GET $MEMSTASH_BASE_URL/udapeople-backend-ip-${CIRCLE_SHA1:0:7})
            BACKEND_URL=$BACKEND_IP:3030/api/status
            curl -s $URL
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_SHA1:0:7}.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
             then
               return 1
             else
               return 0
             fi
      - revert-migrations:
          workflow_id: "${CIRCLE_SHA1:0:7}"
          event: on_fail
      - destroy-environment:
          workflow_id: "${CIRCLE_SHA1:0:7}"
          event: on_fail
      - slack/notify:
          channel: circleci
          event: fail
          template: basic_fail_1

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation list-exports \
            --query "Exports[?Name=='WorkflowID'].Value" \
            --no-paginate \
            --output text > ./.circleci/ansible/originalWorkflowID.txt
            if [ -s "./.circleci/ansible/originalWorkflowID.txt" ]
            then
              cat ./.circleci/ansible/originalWorkflowID.txt
              originalWorkflowID=`cat ./.circleci/ansible/originalWorkflowID.txt`
            else
              echo "New stack will be created"
            fi
            if [ -n "$originalWorkflowID" ]
            then
              echo $originalWorkflowID
              StackOption=update-stack
              StackName=udapeople-$originalWorkflowID
            else
              StackOption=create-stack
              StackName=udapeople-${CIRCLE_SHA1:0:7}
            fi
            aws cloudformation $StackOption \
            --stack-name $StackName \
            --template-body file://./.circleci/files/cloudfront.yml \
            --parameter ParameterKey=WorkflowID,ParameterValue=${CIRCLE_SHA1:0:7} \
            --tags Key=Name,Value=Udapeople-production-${CIRCLE_SHA1:0:7}
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - originalWorkflowID.txt
      - revert-migrations:
          workflow_id: "${CIRCLE_SHA1:0:7}"
          event: on_fail
      - destroy-environment:
          workflow_id: "${CIRCLE_SHA1:0:7}"
          event: on_fail
      - slack/notify:
          channel: circleci
          event: fail
          template: basic_fail_1

# cleanup:
#   docker:
#     # Docker image here
#   steps:
#     # Checkout code from git
#     - run:
#         name: Get old stack workflow id
#         command: |
#           # your code here
#           export OldWorkflowID="the id here"
#           export STACKS=[] #put the list of stacks here
#     - run:
#         name: Remove old stacks and files
#         command: |
#           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#           then
#             # your code here
#           fi

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend:
          context: slack-secrets
      - test-frontend:
          requires: [build-frontend]
          context: slack-secrets
      - test-backend:
          requires: [build-backend]
          context: slack-secrets
      - scan-backend:
          requires: [build-backend]
          context: slack-secrets
      - scan-frontend:
          requires: [build-frontend]
          context: slack-secrets
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          context: slack-secrets
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context: slack-secrets
      - run-migrations:
          requires: [configure-infrastructure]
          context: slack-secrets
      - deploy-frontend:
          requires: [run-migrations]
          context: slack-secrets
      - deploy-backend:
          requires: [run-migrations]
          context: slack-secrets
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          context: slack-secrets
      - cloudfront-update:
          requires: [smoke-test]
          context: slack-secrets
      # - cleanup:
      #     requires: [cloudfront-update]
